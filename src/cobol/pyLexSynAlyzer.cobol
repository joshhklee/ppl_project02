IDENTIFICATION DIVISION.
PROGRAM-ID. pyLexSynAlyzer.

ENVIRONMENT DIVISION.
INPUT-OUTPUT SECTION.
FILE-CONTROL.
    SELECT INPUT-FILE ASSIGN TO "toBeFixedPy.txt".
    SELECT OUTPUT-FILE ASSIGN TO "fixedPy.txt".

DATA DIVISION.
FILE SECTION.
FD INPUT-FILE.
01 INPUT-RECORD PIC X(100).
FD OUTPUT-FILE.
01 OUTPUT-RECORD PIC X(100).

WORKING-STORAGE SECTION.
01 EOF-FLAG PIC X VALUE 'N'.
01 INDENT-LEVEL PIC 9 VALUE 0.
01 INDENT-STRING PIC X(4) VALUE '    '.

PROCEDURE DIVISION.
BEGIN.
    OPEN INPUT INPUT-FILE
    OPEN OUTPUT OUTPUT-FILE
    PERFORM UNTIL EOF-FLAG = 'Y'
        READ INPUT-FILE
            AT END
                MOVE 'Y' TO EOF-FLAG
            NOT AT END
                PERFORM PROCESS-RECORD
        END-READ
    END-PERFORM
    * Write the print count to the output file
    MOVE 'Number of print statements: ' TO OUTPUT-RECORD
    WRITE OUTPUT-RECORD
    MOVE PRINT-COUNT TO OUTPUT-RECORD
    WRITE OUTPUT-RECORD
    CLOSE INPUT-FILE
    CLOSE OUTPUT-FILE
    STOP RUN.

PROCESS-RECORD.
    * Check if the line is a function header
    IF FUNCTION TRIM(INPUT-RECORD) (1:3) = 'def'
        PERFORM CHECK-FUNCTION-HEADER
    END-IF

    * Count 'print' occurrences
    IF FUNCTION TRIM(INPUT-RECORD) (1:5) = 'print'
        ADD 1 TO PRINT-COUNT
    END-IF

    * Check for block start keywords and increase indentation level
    IF FUNCTION TRIM(INPUT-RECORD) (1:2) = 'if' OR
       FUNCTION TRIM(INPUT-RECORD) (1:4) = 'else' OR
       FUNCTION TRIM(INPUT-RECORD) (1:3) = 'for' OR
       FUNCTION TRIM(INPUT-RECORD) (1:5) = 'while' OR
       FUNCTION TRIM(INPUT-RECORD) (1:3) = 'def'
        ADD 1 TO INDENT-LEVEL
    END-IF

    * Apply current indentation
    MOVE SPACES TO OUTPUT-RECORD
    PERFORM VARYING I FROM 1 BY 1 UNTIL I > INDENT-LEVEL
        STRING INDENT-STRING DELIMITED BY SIZE INTO OUTPUT-RECORD
    END-PERFORM

    * Append the actual code line to the indentation
    STRING OUTPUT-RECORD INPUT-RECORD DELIMITED BY SIZE INTO OUTPUT-RECORD

    WRITE OUTPUT-RECORD

    * Check for end of block (simplified logic) and decrease indentation
    IF FUNCTION TRIM(INPUT-RECORD) (1:4) = 'else' OR
       FUNCTION TRIM(INPUT-RECORD) (1:6) = 'return' OR
       FUNCTION TRIM(INPUT-RECORD) (1:5) = 'break' OR
       FUNCTION TRIM(INPUT-RECORD) (1:8) = 'continue'
        SUBTRACT 1 FROM INDENT-LEVEL
    END-IF.

    * Reset indent level if it becomes negative
    IF INDENT-LEVEL < 0
        MOVE 0 TO INDENT-LEVEL
    END-IF.

    CHECK-FUNCTION-HEADER.
    * Assuming INPUT-RECORD has the line starting with 'def'
    INITIALIZE FUNCTION-NAME, FUNCTION-ARGS
    MOVE FUNCTION TRIM(INPUT-RECORD) (5:) TO REMAINING-LINE
    UNSTRING REMAINING-LINE DELIMITED BY ' ' INTO FUNCTION-NAME, REMAINING-LINE
    UNSTRING REMAINING-LINE DELIMITED BY '(' INTO REMAINING-LINE
    IF REMAINING-LINE (1:1) NOT = SPACE
        STRING 'def ' FUNCTION-NAME '()' DELIMITED BY SIZE INTO INPUT-RECORD
    ELSE
        UNSTRING REMAINING-LINE DELIMITED BY ')' INTO FUNCTION-ARGS, REMAINING-LINE
        IF REMAINING-LINE (1:1) = ':'
            CONTINUE
        ELSE
            STRING 'def ' FUNCTION-NAME '(' FUNCTION-ARGS ')' ':' 
                DELIMITED BY SIZE INTO INPUT-RECORD
        END-IF
    END-IF.


END PROGRAM pyLexSynAlyzer.
